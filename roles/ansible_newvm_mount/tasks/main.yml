---

# Pre-FLight check for variable consistency
- fail:
    msg: the variable "{{ item }}" should be defined.
  when: item == ''
  with_items:
    - "{{ act_appname }}"
    - "{{ act_vendorkey }}"
    - "{{ act_restoretime }}"
    - "{{ vm_tgt_esxhost }}"
    - "{{ vm_type }}"
    - "{{ vm_name }}"
    - "{{ vm_datastore }}"

# Generate a login token using the username, password and vendorkey
- name: generating authentication token 
  uri:
    url: "{{ act_api_login }}"
    validate_certs: no  
  register: logintoken

- name: session id is a fact
  set_fact: 
    act_sessionid: "{{ logintoken.json.sessionid }}"

# try to ascertain the destination vCenter or System Center management host ID
- name: search for host_id from name
  block: 
    - uri:
        url: "{{ act_api_info }}/lshost?sessionid={{ act_sessionid }}&filtervalue={{ 'hostname=' | urlencode }}{{ vm_mgmtserver }}"
        validate_certs: no
      register: mgmthostid
    
    - set_fact:
        mgmt_host_id: "{{ mgmthostid.json.result.0.id }}"
      when: mgmthostid is defined

    - fail:
        msg: "Unable to find a hostID with a vm_mgmthost description"
      when: mgmt_host_id is not defined

  when: vm_mgmtserver != ""

# try to ascertain the destination ESXi or Hyper-V host ID
- name: search for host_id from name
  block: 
    - uri:
        url: "{{ act_api_info }}/lshost?sessionid={{ act_sessionid }}&filtervalue={{ 'hostname=' | urlencode }}{{ vm_tgt_esxhost }}"
        validate_certs: no
      register: esxhostid
    
    - set_fact:
        esx_host_id: "{{ esxhostid.json.result.0.id }}"
      when: esxhostid is defined

    - fail:
        msg: "Unable to find a hostID with a vm_esxhost description"
      when: esx_host_id is not defined

- block:
  # Filter out the hostid based on application_name and vm_type
  - name: get vm's host id
    block: 
    - uri:
        url: "{{ act_api_info }}/lshost?sessionid={{ act_sessionid }}&filtervalue={{ 'hostname=' | urlencode }}{{ act_appname }}{{ '&vmtype=' | urlencode }}{{ vm_type }}"
        validate_certs: no
        method: GET
      register: lshost   

    - set_fact: 
        numlshost: "{{ lshost.json.result | length }}"
      when: lshost is defined

    - set_fact: 
        hostid: "{{ lshost.json.result[0].id }}"
      when: numlshost == "1"


  # Filter out the applicationid based on the application_name and source_esxihost
  - name: try to get the application id with auxinfo
    block:
    - uri:
        url: "{{ act_api_info }}/lsapplication?sessionid={{ act_sessionid }}&filtervalue={{ 'appname=' | urlencode }}{{ act_appname }}{{ '&auxinfo=' | urlencode }}{{ vm_src_esxhost  }}"
        validate_certs: no
        method: GET
      register: lsapplication 

    - set_fact:
        numlsapp: "{{ lsapplication.json.result | length }}"

    - set_fact:
        appid: "{{ lsapplication.json.result[0].id }}"
      when: numlsapp != "0"

    when: hostid is not defined 

  # Filter out the applicationid based on the application_name and hostid
  - name: try to get the application id with hostid
    block:
    - uri:
        url: "{{ act_api_info }}/lsapplication?sessionid={{ act_sessionid }}&filtervalue={{ 'appname=' | urlencode }}{{ act_appname }}{{ '&hostid=' | urlencode }}{{ hostid }}"
        validate_certs: no
        method: GET
      register: lsapplication 

    - set_fact:
        numlsapp: "{{ lsapplication.json.result | length }}"

    - set_fact:
        appid: "{{ lsapplication.json.result[0].id }}"
      when: numlsapp != "0"

    when: hostid is defined

  # Pre-flight check for number of result with lsapplication
  - fail:
      msg: could not specify source VM with name because of incorrect name or duplication.
    when: numlsapp != "1"


#- block:
  # Filter all the available backups if the jobclass is not specified
  - block: 
        - name: get the image list select the image from (for all the job_classes)
          uri: 
            url: "{{ act_api_info }}/lsbackup?filtervalue={{ 'appid=' | urlencode }}{{ appid }}&sessionid={{ act_sessionid }}"
            validate_certs: no
          register: lsbackup
        - set_fact:
            image_list: "{{ lsbackup }}"
    when: act_job_class == ''

    # Filter all the backup images if the jobclass is specified.
  - block:
        - name: get the image list select the image from (for {{ act_job_class }} job_class)
          uri: 
            url: "{{ act_api_info }}/lsbackup?filtervalue={{ 'appid=' | urlencode }}{{ appid }}{{ '&jobclass=' | urlencode }}{{ act_job_class | urlencode }}&sessionid={{ act_sessionid }}"
            validate_certs: no
          register: lsbackup
        - set_fact:
            image_list: "{{ lsbackup }}"
    when: act_job_class != ''

    # Selecting the image to mount based on the restoretime and strict_poliocy
  - name: selecting an image to mount
    uri:
        url: "{{ act_api_info }}/lsbackup?argument={{ item.backupname }}&sessionid={{ act_sessionid }}"
        validate_certs: no
    register: image 
    with_items: 
        - "{{ image_list.json.result }}"

  - name: save the image name to facts
    set_fact: 
        image_name: "{{ image | get_image_name (act_restoretime, strict_policy) }}" # Custom filter plugin
    when: image is defined

  when: act_imagename == ''

- set_fact:
    image_name: "{{ act_imagename }}"
  when: act_imagename != ''

- name: non-blocking mount operations
  set_fact: 
    block_mode: "&nowait"
  when: act_nowait_mount == true

- name: blocking mount operations
  set_fact: 
    block_mode: ""
  when: act_nowait_mount != true

- block:
  # For VMware VM
  - name: specify Physical RDM option
    set_fact: 
      physicalrdm: "&physicalrdm"
    when: vm_physicalrdm == "true"

  - name: Not specify Physical RDM option
    set_fact: 
      physicalrdm: ""
    when: vm_physicalrdm != "true"

  # Trigger new VM mount
  - name: New VM mount with mgmtserver
    uri:
      url: "{{ act_api_task}}/mountimage?image={{ image_name }}&mgmtserver={{ mgmt_host_id }}&esxhost={{ esx_host_id }}&vmname={{ vm_name }}&datastore={{ vm_datastore }}{{ physicalrdm }}&label={{ act_imagelabel }}{{ block_mode }}&sessionid={{ act_sessionid }}&restoreoption={{ 'restoremacaddr=' | urlencode }}{{ vm_restoremac }}{{ ',mapdiskstoallesxhosts=' | urlencode}}{{ vm_mapdiskstoallesx }}"
      method: POST
      validate_certs: no
      timeout: 1200
      async: 0
    when: mgmt_host_id is defined 

  - name: New VM mount without mgmtserver
    uri:
      url: "{{ act_api_task}}/mountimage?image={{ image_name }}&esxhost={{ esx_host_id }}&vmname={{ vm_name }}&datastore={{ vm_datastore }}{{ physicalrdm }}&label={{ act_imagelabel }}{{ block_mode }}&sessionid={{ act_sessionid }}&restoreoption={{ 'restoremacaddr=' | urlencode }}{{ vm_restoremac }}"
      method: POST
      validate_certs: no
      timeout: 1200
      async: 0
    when: mgmt_host_id is not defined 

  when: vm_type == "vmware"

- block:
  # For Hyper-V
  # Trigger new VM mount
  - name: New VM mount with mgmtserver
    uri:
      url: "{{ act_api_task}}/mountimage?image={{ image_name }}&mgmtserver={{ mgmt_host_id }}&esxhost={{ esx_host_id }}&vmname={{ vm_name }}&datastore={{ vm_datastore | urlencode }}&label={{ act_imagelabel }}{{ block_mode }}&sessionid={{ act_sessionid }}"
      method: POST
      validate_certs: no
      timeout: 1200
      async: 0
    when: mgmt_host_id is defined 

  - name: New VM mount without mgmtserver
    uri:
      url: "{{ act_api_task}}/mountimage?image={{ image_name }}&esxhost={{ esx_host_id }}&vmname={{ vm_name }}&datastore={{ vm_datastore | urlencode }}&label={{ act_imagelabel }}{{ block_mode }}&sessionid={{ act_sessionid }}"
      method: POST
      validate_certs: no
      timeout: 1200
      async: 0
    when: mgmt_host_id is not defined 

  when: vm_type == "hyperv"
